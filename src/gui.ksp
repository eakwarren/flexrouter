{ Called during script initialization }
macro gui_initialize
    { DECLARATIONS }

    { Rules menu and rules buttons }
    declare ui_menu menu_rules
    declare ui_button button_add
    declare ui_button button_remove
      declare ui_switch button_rule_bypass
    { TODO }
    { declare ui_button button_sort }


    { Rule name }
    declare ui_label label_rule_name (1,1)
      declare ui_text_edit @text_rule_name

    { Keyswitch channel }
    declare ui_label label_rule_keyswitch_channel (1,1)
      declare ui_value_edit value_rule_keyswitch_channel (1, 16, 1)
    declare ui_label label_rule_keyswitch_channel_name (1,1)

    { Target Channel (rule default) }
    declare ui_label label_rule_target_channel (1,1)
      declare ui_value_edit value_rule_target_channel (1, 64, 1)
    declare ui_label label_rule_target_name (1,1)
      declare ui_label label_rule_target_info (1,1)

    { Keyswitches menu and keyswitch buttons }
    declare ui_label label_keyswitches (1,1)
    declare ui_menu menu_keyswitches
    declare ui_switch button_keyswitch_midi_learn
    declare ui_switch button_keyswitch_midi_find
    declare ui_switch button_keyswitch_remove
    declare ui_button button_keyswitch_clear

    { Keyswitch action menu (block, passthrough, redirect) }
    declare ui_label label_rule_keyswitch_action (1,1)
    declare ui_menu menu_rule_keyswitch_action

    { Redirect controls (when action is set to redirect) }
    declare ui_label label_rule_keyswitch_redirect_to (1,1)
    { Redirect type menu (key or CC) }
    declare ui_menu menu_rule_keyswitch_redirect_type

    { Key redirect controls (when redirect type is set to key) }
    declare ui_value_edit value_rule_keyswitch_redirect_key (0, 127, VALUE_EDIT_MODE_NOTE_NAMES)
    declare ui_label label_rule_keyswitch_redirect_key_velocity (1,1)
    declare ui_value_edit value_rule_keyswitch_redirect_key_velocity (0, 127, 1)

    { CC redirect controls (when redirect type is set to CC) }
    declare ui_value_edit value_rule_keyswitch_redirect_cc (2, 127, 1)
    declare ui_label label_rule_keyswitch_action_cc_slash (1,1)
    declare ui_value_edit value_rule_keyswitch_redirect_cc_value (0, 127, 1)

    { Keyswitch source channel }
    declare ui_label label_rule_keyswitch_source_channel (1,1)
    declare ui_value_edit value_rule_keyswitch_source_channel (0, 16, 1)
    declare ui_label label_rule_keyswitch_source_name (1,1)
    declare ui_label label_rule_keyswitch_source_info (1,1)

    { Keyswitch target channel }
    declare ui_label label_rule_keyswitch_target_channel (1,1)
    declare ui_value_edit value_rule_keyswitch_target_channel (0, 64, 1)
    declare ui_label label_rule_keyswitch_target_name (1,1)
    declare ui_label label_rule_keyswitch_target_info (1,1)

    { Keyswitch MIDI Learn button }
    declare ui_switch button_rule_keyswitch_redirect_midi_learn



    { CONTROL INITIALIZATION }
      make_persistent(menu_rules)
    set_ui_height_px(200)

    move_and_set_width(menu_rules, 70, 10, 210)
      for i := 0 to MAX_RULES - 1
        add_menu_item(menu_rules, rules[i].name, i)
          set_menu_item_visibility(get_ui_id(menu_rules), i, rules[i].config[RULE_DEFINED])
    end for

    set_text(button_add, "Add Rule")
    move_and_set_width(button_add, 290, 10, 50)

    set_text(button_remove, "Remove Rule")
    move_and_set_width(button_remove, 350, 10, 70)

    set_text(button_rule_bypass, "Bypass Rule")
    move_and_set_width(button_rule_bypass, 430, 10, 65)
    center(button_rule_bypass)

    {
    set_text(button_sort, "Sort Rules")
    move_and_set_width(button_sort, 430, 10, 60)
    }

    init_label(label_rule_name, "Rule Name", 95, 40, 95)
    move_and_set_width(text_rule_name, 200, 40, 190)

    init_label(label_rule_keyswitch_channel, "Keyswitch Channel", 95, 60, 95)
    move_and_set_width(value_rule_keyswitch_channel, 200, 60, 35)
    set_text(value_rule_keyswitch_channel, "")
    init_info_label(label_rule_keyswitch_channel_name, 0, "[A] 1", 235, 60, 25)


    init_label(label_rule_target_channel, "Target Channel", 95, 80, 95)
    move_and_set_width(value_rule_target_channel, 200, 80, 35)
    set_text(value_rule_target_channel, "")
    init_info_label(label_rule_target_name, 0, "[A] 1", 235, 80, 25)
    init_info_label(label_rule_target_info, 9, "(Keyswitches can override this rule default.)", 275, 80, 200)


    init_label(label_keyswitches, "Keyswitches", 100, 110, 90)
    move_and_set_width(menu_keyswitches, 200, 110, 80)
       for i := 0 to MAX_KEYSWITCHES_PER_RULE - 1
        add_menu_item(menu_keyswitches, "", i)
    end for
    set_text(button_keyswitch_midi_learn, "MIDI Learn")
    move_and_set_width(button_keyswitch_midi_learn, 290, 110, 60)
    set_text(button_keyswitch_midi_find, "MIDI Find")
    move_and_set_width(button_keyswitch_midi_find, 360, 110, 60)
    set_text(button_keyswitch_remove, "Remove")
    move_and_set_width(button_keyswitch_remove, 430, 110, 50)
    set_text(button_keyswitch_clear, "Clear All")
    move_and_set_width(button_keyswitch_clear, 490, 110, 55)
    center(button_keyswitch_clear)


    init_label(label_rule_keyswitch_action, "Action", 140, 130, 50)

    move_and_set_width(menu_rule_keyswitch_action, 200, 130, 80)
    add_menu_item(menu_rule_keyswitch_action, "Block", -1)
    add_menu_item(menu_rule_keyswitch_action, "Passthrough", -2)
    add_menu_item(menu_rule_keyswitch_action, "Redirect", 0)

    init_label(label_rule_keyswitch_redirect_to, "to", 285, 130, 25)
    center(label_rule_keyswitch_redirect_to)

    move_and_set_width(menu_rule_keyswitch_redirect_type, 315, 130, 40)
    add_menu_item(menu_rule_keyswitch_redirect_type, "Key", 0)
    add_menu_item(menu_rule_keyswitch_redirect_type, "CC", 1)

    move_and_set_width(value_rule_keyswitch_redirect_key, 360, 130, 40)
    set_text(value_rule_keyswitch_redirect_key, "")
    init_label(label_rule_keyswitch_redirect_key_velocity, "Velocity", 400, 130, 45)
    center(label_rule_keyswitch_redirect_key_velocity)
    move_and_set_width(value_rule_keyswitch_redirect_key_velocity, 445, 130, 35)
    set_text(value_rule_keyswitch_redirect_key_velocity, "")

    move_and_set_width(value_rule_keyswitch_redirect_cc, 360, 130, 35)
    set_text(value_rule_keyswitch_redirect_cc, "")
    init_label(label_rule_keyswitch_action_cc_slash, "/", 395, 130, 15)
    move_and_set_width(value_rule_keyswitch_redirect_cc_value, 410, 130, 35)
    set_text(value_rule_keyswitch_redirect_cc_value, "")

    set_text(button_rule_keyswitch_redirect_midi_learn, "MIDI Learn")
    move_and_set_width(button_rule_keyswitch_redirect_midi_learn, 485, 130, 60)


    init_label(label_rule_keyswitch_source_channel, "Source", 140, 150, 50)
    move_and_set_width(value_rule_keyswitch_source_channel, 200, 150, 35)
    set_text(value_rule_keyswitch_source_channel, "")
    init_info_label(label_rule_keyswitch_source_name, 0, "[A] 1", 235, 150, 25)
    init_info_label(label_rule_keyswitch_source_info, 9, "(0 = all channels)", 275, 150, 200)


    init_label(label_rule_keyswitch_target_channel, "Target", 140, 170, 50)
    move_and_set_width(value_rule_keyswitch_target_channel, 200, 170, 35)
    set_text(value_rule_keyswitch_target_channel, "")
    init_info_label(label_rule_keyswitch_target_name, 0, "[A] 1", 235, 170, 25)
    init_info_label(label_rule_keyswitch_target_info, 9, "(0 = use default target channel for rule)", 275, 170, 200)

      read_persistent_var(menu_rules)
    gui_update_for_selected_rule()
end macro


{ CONVENIENCE MACROS }

macro move(control, x, y)
      set_control_par(get_ui_id(control), CONTROL_PAR_POS_X, x)
      set_control_par(get_ui_id(control), CONTROL_PAR_POS_Y, y)
end macro

macro move_and_set_width(control, x, y, w)
    move(control, x, y)
    set_control_par(get_ui_id(control), CONTROL_PAR_WIDTH, w)
end macro

macro init_label(label, text, x, y, w)
    set_text(label, text)
    move_and_set_width(label, x, y, w)
    set_control_par(get_ui_id(label), CONTROL_PAR_TEXT_ALIGNMENT, 2)
end macro

macro init_info_label(label, font, text, x, y, w)
    init_label(label, text, x, y, w)
    set_control_par(get_ui_id(label), CONTROL_PAR_HIDE, HIDE_PART_BG)
    set_control_par(get_ui_id(label), CONTROL_PAR_TEXT_ALIGNMENT, 0)
    set_control_par(get_ui_id(label), CONTROL_PAR_FONT_TYPE, font)
end macro

macro hide(control)
    set_control_par(get_ui_id(control), CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
end macro

macro show(control)
    set_control_par(get_ui_id(control), CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
end macro

macro center(control)
    set_control_par(get_ui_id(control), CONTROL_PAR_TEXT_ALIGNMENT, 1)
end macro



{ GUI FUNCTIONS }

{ Returns the index of the selected rule in the UI }
function gui_get_selected_rule() -> idx
    idx := get_control_par(get_ui_id(menu_rules), CONTROL_PAR_SELECTED_ITEM_IDX)
end function


{ Returns the index of the selected keyswitch in the UI (within the context of the selected rule) }
function gui_get_selected_keyswitch() -> idx
    idx := get_control_par(get_ui_id(menu_keyswitches), CONTROL_PAR_SELECTED_ITEM_IDX)
end function


{ Given a channel number, update the given label with the human readable channel name. }
function _gui_set_channel_info_label(label, channel)
    name := get_midi_channel_name(channel)
    set_text(label, name)
end function


{ Update all MIDI channel name labels in the UI to reflect the currently configured channels. }
function gui_update_midi_channel_names
    _gui_set_channel_info_label(label_rule_keyswitch_channel_name, value_rule_keyswitch_channel)
    _gui_set_channel_info_label(label_rule_target_name, value_rule_target_channel)
    if value_rule_keyswitch_source_channel = 0
        set_text(label_rule_keyswitch_source_name, "All")
    else
        _gui_set_channel_info_label(label_rule_keyswitch_source_name, value_rule_keyswitch_source_channel)
    end if
    if value_rule_keyswitch_target_channel = 0
        _gui_set_channel_info_label(label_rule_keyswitch_target_name, value_rule_target_channel)
    else
        _gui_set_channel_info_label(label_rule_keyswitch_target_name, value_rule_keyswitch_target_channel)
    end if
end function


{ Adjusts all the UI elements to reflect the currently selected item in the rules menu. }
function gui_update_for_selected_rule()
    rule := gui_get_selected_rule()
    text_rule_name := rules[rule].name
    value_rule_keyswitch_channel := rules[rule].config[RULE_KEYSWITCH_CHANNEL]
    value_rule_target_channel := rules[rule].config[RULE_TARGET_CHANNEL]

    button_rule_bypass := 1 - rules[rule].config[RULE_ENABLED]
    menu_keyswitches := 0
       for i := 0 to MAX_KEYSWITCHES_PER_RULE - 1
           ks := rules[rule].keyswitches[i]
           if ks # -1
               name := get_keyswitch_name(ks)
               { name := "CC128/128" }
               set_menu_item_str(get_ui_id(menu_keyswitches), i, name)
               set_menu_item_visibility(get_ui_id(menu_keyswitches), i, 1)
           else
               set_menu_item_str(get_ui_id(menu_keyswitches), i, "<empty>")
            if i > 0
                  set_menu_item_visibility(get_ui_id(menu_keyswitches), i, 0)
            end if
           end if
    end for
    gui_update_for_selected_keyswitch()
    gui_update_midi_channel_names()
end function


{ Set visibility of all controls in the keyswitch section by context of the keyswitch configuration. }
function gui_set_keyswitch_section_visibility(ks, redirect)
    { section control, section info label, general redirect controls, key redirect controls, CC redirect controls }
    declare params[5]
    for j := 0 to 4
        params[j] := HIDE_WHOLE_CONTROL
    end for
    if ks >= 0
        params[0] := HIDE_PART_NOTHING
        params[1] := HIDE_PART_BG
        if redirect >= 0
            params[2] := HIDE_PART_NOTHING
            if redirect < 128
                params[3] := HIDE_PART_NOTHING
            else
                params[4] := HIDE_PART_NOTHING
            end if
        end if
    end if

    set_control_par(get_ui_id(label_rule_keyswitch_action), CONTROL_PAR_HIDE, params[0])
    set_control_par(get_ui_id(menu_rule_keyswitch_action), CONTROL_PAR_HIDE, params[0])

    set_control_par(get_ui_id(label_rule_keyswitch_redirect_to), CONTROL_PAR_HIDE, params[2])
    set_control_par(get_ui_id(menu_rule_keyswitch_redirect_type), CONTROL_PAR_HIDE, params[2])

    set_control_par(get_ui_id(value_rule_keyswitch_redirect_key), CONTROL_PAR_HIDE, params[3])
    set_control_par(get_ui_id(label_rule_keyswitch_redirect_key_velocity), CONTROL_PAR_HIDE, params[3])
    set_control_par(get_ui_id(value_rule_keyswitch_redirect_key_velocity), CONTROL_PAR_HIDE, params[3])

    set_control_par(get_ui_id(value_rule_keyswitch_redirect_cc), CONTROL_PAR_HIDE, params[4])
    set_control_par(get_ui_id(label_rule_keyswitch_action_cc_slash), CONTROL_PAR_HIDE, params[4])
    set_control_par(get_ui_id(value_rule_keyswitch_redirect_cc_value), CONTROL_PAR_HIDE, params[4])

    set_control_par(get_ui_id(button_rule_keyswitch_redirect_midi_learn), CONTROL_PAR_HIDE, params[2])

    set_control_par(get_ui_id(label_rule_keyswitch_source_channel), CONTROL_PAR_HIDE, params[0])
    set_control_par(get_ui_id(value_rule_keyswitch_source_channel), CONTROL_PAR_HIDE, params[0])
    set_control_par(get_ui_id(label_rule_keyswitch_source_name), CONTROL_PAR_HIDE, params[1])
    set_control_par(get_ui_id(label_rule_keyswitch_source_info), CONTROL_PAR_HIDE, params[1])

    set_control_par(get_ui_id(label_rule_keyswitch_target_channel), CONTROL_PAR_HIDE, params[0])
    set_control_par(get_ui_id(value_rule_keyswitch_target_channel), CONTROL_PAR_HIDE, params[0])
    set_control_par(get_ui_id(label_rule_keyswitch_target_name), CONTROL_PAR_HIDE, params[1])
    set_control_par(get_ui_id(label_rule_keyswitch_target_info), CONTROL_PAR_HIDE, params[1])
end function


{ Adjusts all the UI elements to reflect the currently selected keyswitch (for the current rule) }
function gui_update_for_selected_keyswitch()
    rule := gui_get_selected_rule()
    idx := gui_get_selected_keyswitch()
    ks := rules[rule].keyswitches[idx]
    redirect := rules[rule].keyswitch_config[idx, RULE_KEYSWITCH_REDIRECT]
    value_rule_keyswitch_source_channel := rules[rule].keyswitch_config[idx, RULE_KEYSWITCH_SOURCE_CHANNEL]
    value_rule_keyswitch_target_channel := rules[rule].keyswitch_config[idx, RULE_KEYSWITCH_TARGET_CHANNEL]

    gui_set_keyswitch_section_visibility(ks, redirect)

    if redirect < 0
        menu_rule_keyswitch_action := redirect
    else
        menu_rule_keyswitch_action := 0
        if redirect < 128
            value_rule_keyswitch_redirect_key := redirect
            menu_rule_keyswitch_redirect_type := 0
            value_rule_keyswitch_redirect_key_velocity := rules[rule].keyswitch_config[idx, RULE_KEYSWITCH_REDIRECT_VELOCITY]
        else
            menu_rule_keyswitch_redirect_type := 1
            value_rule_keyswitch_redirect_cc := redirect / 128 - 128
            value_rule_keyswitch_redirect_cc_value := redirect mod 128
        end if
    end if
    if redirect = -1
        name := "(none)"
    else
        name := get_keyswitch_name(redirect)
    end if
end function


{ Sets the given config parameter for the currently selected rule. }
function gui_set_selected_rule_config(config, value)
    rule := gui_get_selected_rule()
    rules[rule].config[config] := value
    call build_ks_maps
end function


{ Clears all active routes and informs user via a message.  Must be called when a UI
  element is changed that would invalidate the current routes. }
function gui_clear_active_routes_for_all_channels()
    for j := 0 to NUM_SOURCE_CHANNELS - 1
        clear_active_routes_for_channel(j)
    end for
    message("Active keyswitches cleared due to rule change.  Keyswitches must be retriggered.")
end function


{ Adds the given keyswitch number to the currently selected rule.  Triggered by MIDI learn. }
function gui_append_keyswitch_to_selected_rule(ks)
    rule := gui_get_selected_rule()
    idx := get_keyswitch_idx_for_rule(rule, ks)
    if idx = -1
        { Determine the currently selected keyswitch in the GUI for later. }
        idx := gui_get_selected_keyswitch()
        count := get_num_keyswitches_for_rule(rule)
        if count < MAX_KEYSWITCHES_PER_RULE
            name := get_keyswitch_name(ks)
            set_menu_item_str(get_ui_id(menu_keyswitches), count, name)
            set_menu_item_visibility(get_ui_id(menu_keyswitches), count, 1)
            rules[rule].keyswitches[count] := ks
            menu_keyswitches := count

            if count > 0
                { Clone some config from the currently selected keyswitch }

                { If the currently selected keyswitch we're clone is a redirect, rather than
                  cloning the redirect config directly, measure the distance between the new
                  keyswitch and the currently selected keyswitch and adjust the redirection
                  based on the distance. }
                redirect := rules[rule].keyswitch_config[idx, RULE_KEYSWITCH_REDIRECT]
                if redirect >= 0
                    offset := ks - rules[rule].keyswitches[idx]
                    redirect := redirect + offset
                    if redirect < 0
                        redirect := 0
                    end if
                end if
                { Now configure the new keyswitch with the adjusted redirect and the
                  source/target channels of the cloned keyswitch. }
                rules[rule].keyswitch_config[count, RULE_KEYSWITCH_REDIRECT] := redirect
                rules[rule].keyswitch_config[count, RULE_KEYSWITCH_SOURCE_CHANNEL] := rules[rule].keyswitch_config[idx, RULE_KEYSWITCH_SOURCE_CHANNEL]
                rules[rule].keyswitch_config[count, RULE_KEYSWITCH_TARGET_CHANNEL] := rules[rule].keyswitch_config[idx, RULE_KEYSWITCH_TARGET_CHANNEL]
                rules[rule].keyswitch_config[count, RULE_KEYSWITCH_REDIRECT_VELOCITY] := rules[rule].keyswitch_config[idx, RULE_KEYSWITCH_REDIRECT_VELOCITY]
            else
                { Initialize new keyswitch (not cloned) to blocked, all source channels, 
                  rule default target channel. }
                rules[rule].keyswitch_config[count, RULE_KEYSWITCH_REDIRECT] := -1
                rules[rule].keyswitch_config[count, RULE_KEYSWITCH_SOURCE_CHANNEL] := 0
                rules[rule].keyswitch_config[count, RULE_KEYSWITCH_TARGET_CHANNEL] := 0
                rules[rule].keyswitch_config[count, RULE_KEYSWITCH_REDIRECT_VELOCITY] := 127
            end if
            call gui_update_for_selected_keyswitch
            message("Added keyswitch " & name & " to rule " & rules[rule].name & " at " & count)
        else
            message("ERROR: too many keyswitches for this rule, can't add.")
        end if
    else
        { Keyswitch already exists, so select it in UI instead }
        menu_keyswitches := idx
        call gui_update_for_selected_keyswitch
    end if
end function


{ Removes all keyswitches for the current rule. }
function gui_clear_keyswitches_for_selected_rule()
    rule := gui_get_selected_rule()
    menu_keyswitches := 0
    for i := 0 to MAX_KEYSWITCHES_PER_RULE - 1
        rules[rule].keyswitches[i] := -1
        rules[rule].keyswitch_config[i, RULE_KEYSWITCH_REDIRECT] := -1
        set_menu_item_str(get_ui_id(menu_keyswitches), i, "<empty>")
        if i > 0
            set_menu_item_visibility(get_ui_id(menu_keyswitches), i, 0)
        end if
    end for
    call gui_clear_active_routes_for_all_channels
    call gui_update_for_selected_keyswitch
end function


{ Sets the given config parameter for the currently selected keyswitch. }
function gui_set_selected_keyswitch_config(config, value)
    rule := gui_get_selected_rule()
    idx := gui_get_selected_keyswitch()
    rules[rule].keyswitch_config[idx, config] := value
end function


{ Updates the UI to show the given keyswitch as selected.  Triggered by MIDI Find. }
function gui_set_selected_keyswitch_by_ks(ks)
    rule := gui_get_selected_rule()
    idx := get_keyswitch_idx_for_rule(rule, ks)
    if idx # -1
        menu_keyswitches := idx
        call gui_update_for_selected_keyswitch
        call gui_update_midi_channel_names
    else
        name := get_keyswitch_name(ks)
        message("Keyswitch " & name & " not found for this rule")
    end if
end function


{ Configures the redirect keyswitch for the currently selected keyswitch.  Triggered
  by keyswitch MIDI Learn. }
function gui_set_selected_keyswitch_redirect(ks, value)
    gui_set_selected_keyswitch_config(RULE_KEYSWITCH_REDIRECT, ks)
    if ks < 128
        gui_set_selected_keyswitch_config(RULE_KEYSWITCH_REDIRECT_VELOCITY, value)
    end if
    button_rule_keyswitch_redirect_midi_learn := 0
    call gui_update_for_selected_keyswitch
    call build_ks_maps
end function


{ Configures the active keyswitch redirection parameters from the current UI settings }
function gui_set_selected_keyswitch_redirect_from_ui
    if menu_rule_keyswitch_redirect_type = 0
        { Key}
        ks := value_rule_keyswitch_redirect_key
    else
        { CC }
        ks := 128*128 + value_rule_keyswitch_redirect_cc * 128 + value_rule_keyswitch_redirect_cc_value
    end if
    gui_set_selected_keyswitch_redirect(ks, value_rule_keyswitch_redirect_key_velocity)
end function



{ EVENT HANDLERS }

{ Selected rule changed }
on ui_control(menu_rules)
    call gui_update_for_selected_rule
end on


{ Add Rule button clicked }
on ui_control(button_add)
    { Find empty available slot for rule }
    idx := -1
    for i := 0 to MAX_RULES - 1
        if idx = -1 and rules[i].config[RULE_DEFINED] = 0
            idx := i
        end if
    end for
    if idx = -1
        message("Can't add a new rule, already at limit of " & MAX_RULES)
    else
        initialize_rule(idx, "New Rule")
        set_menu_item_str(get_ui_id(menu_rules), idx, rules[idx].name)
        set_menu_item_visibility(get_ui_id(menu_rules), idx, 1)
        menu_rules := idx
        call gui_update_for_selected_rule
    end if
    button_add := 0
end on


{ Remove Rule button clicked }
on ui_control(button_remove)
    rule := gui_get_selected_rule()
    { Determine closest adjacent rule to select next. }
    target := -1
    for i := 0 to MAX_RULES - 1
        if rules[i].config[RULE_DEFINED] = 1 and i # rule and ...
         (target = -1 or abs(rule - i) < abs(rule - target))
            target := i
        end if
    end for
    if target = -1
        { This is the last rule, so rather than delete it, clear/reset it instead. }
        initialize_rule(idx, "Your first rule - rename me!")
        set_menu_item_str(get_ui_id(menu_rules), idx, rules[idx].name)
        call gui_update_for_selected_rule
    else
        rules[rule].config[RULE_DEFINED] := 0
        { TODO: vacuum rules list }
        menu_rules := target
        set_menu_item_visibility(get_ui_id(menu_rules), rule, 0)
        call gui_update_for_selected_rule
        message("")
    end if
    button_remove := 0
end on


{ Rule name text entry changed }
on ui_control(text_rule_name)
    rule := gui_get_selected_rule()
    rules[rule].name := text_rule_name
    set_menu_item_str(get_ui_id(menu_rules), rule, text_rule_name)
end on


{ Rule Bypass button clicked }
on ui_control(button_rule_bypass)
    gui_set_selected_rule_config(RULE_ENABLED, 1 - button_rule_bypass)
    call gui_clear_active_routes_for_all_channels
end on


{ Keyswitch channel value changed }
on ui_control(value_rule_keyswitch_channel)
    gui_clear_active_routes_for_all_channels()
    gui_set_selected_rule_config(RULE_KEYSWITCH_CHANNEL, value_rule_keyswitch_channel)
    call gui_update_midi_channel_names
end on


{ Target channel value changed }
on ui_control(value_rule_target_channel)
    gui_clear_active_routes_for_all_channels()
    gui_set_selected_rule_config(RULE_TARGET_CHANNEL, value_rule_target_channel)
    call gui_update_midi_channel_names
end on


{ Selected keyswitch changed }
on ui_control(menu_keyswitches)
    call gui_update_for_selected_keyswitch
    call gui_update_midi_channel_names
end on


{ Keyswitch MIDI Learn button clicked }
on ui_control(button_keyswitch_midi_learn)
    button_rule_keyswitch_redirect_midi_learn := 0
    button_keyswitch_midi_find := 0
    if button_keyswitch_midi_learn = 0
        call build_ks_maps
    end if
end on



{ Keyswitch Redirect MIDI Learn button clicked }
on ui_control(button_keyswitch_midi_find)
    button_keyswitch_midi_learn := 0
    button_rule_keyswitch_redirect_midi_learn := 0
end on


{ Keyswitch Remove button clicked }
on ui_control(button_keyswitch_remove)
    rule := gui_get_selected_rule()
    ks := gui_get_selected_keyswitch()
    count := get_num_keyswitches_for_rule(rule)

    if ks > 0 and ks = count - 1
        menu_keyswitches := count - 2
    end if

    while ks < MAX_KEYSWITCHES_PER_RULE
        rules[rule].keyswitches[ks] := rules[rule].keyswitches[ks + 1]
        rules[rule].keyswitches[ks + 1] := -1
        name := get_menu_item_str(get_ui_id(menu_keyswitches), ks + 1)
        set_menu_item_str(get_ui_id(menu_keyswitches), ks, name)
        for i := 0 to MAX_CONFIG_PER_KEYSWITCH
            rules[rule].keyswitch_config[ks, i] := rules[rule].keyswitch_config[ks + 1, i]
            rules[rule].keyswitch_config[ks + 1, i] := -1
        end for
        ks := ks + 1
    end while

    { Hide the last item that was in the list }
    set_menu_item_str(get_ui_id(menu_keyswitches), count - 1, "<empty>")
    set_menu_item_visibility(get_ui_id(menu_keyswitches), count - 1, 0)
    call gui_update_for_selected_keyswitch
    button_keyswitch_remove := 0
end on


{ Keyswitch Clear button clicked }
on ui_control(button_keyswitch_clear)
    call gui_clear_keyswitches_for_selected_rule
    call build_ks_maps
    button_keyswitch_clear := 0
end on


{ Keyswitch action menu (block, passthrough, redirect) changed }
on ui_control(menu_rule_keyswitch_action)
    gui_set_selected_keyswitch_config(RULE_KEYSWITCH_REDIRECT, menu_rule_keyswitch_action)
    call gui_update_for_selected_keyswitch
end on


{ Keyswitch redirect type menu (key or CC) changed }
on ui_control(menu_rule_keyswitch_redirect_type)
    if menu_rule_keyswitch_redirect_type = 0
        redirect := 0   { C-2 }
        gui_set_selected_keyswitch_config(RULE_KEYSWITCH_REDIRECT_VELOCITY, 127)
    else
        redirect := 130*128 { CC-2 value 0 }
    end if
    gui_set_selected_keyswitch_config(RULE_KEYSWITCH_REDIRECT, redirect)
    call gui_update_for_selected_keyswitch
end on


{ Keyswitch redirect to note value changed }
on ui_control(value_rule_keyswitch_redirect_key)
    call gui_set_selected_keyswitch_redirect_from_ui
end on


{ Keyswitch redirect to note velocity value changed }
on ui_control(value_rule_keyswitch_redirect_key_velocity)
    gui_set_selected_keyswitch_config(RULE_KEYSWITCH_REDIRECT_VELOCITY, value_rule_keyswitch_redirect_key_velocity)
    call gui_set_selected_keyswitch_redirect_from_ui
end on


{ Keyswitch redirect to CC number changed }
on ui_control(value_rule_keyswitch_redirect_cc)
    call gui_set_selected_keyswitch_redirect_from_ui
end on


{ Keyswitch redirect to CC value }
on ui_control(value_rule_keyswitch_redirect_cc_value)
    call gui_set_selected_keyswitch_redirect_from_ui
end on



{ Keyswitch Redirect MIDI Learn button clicked }
on ui_control(button_rule_keyswitch_redirect_midi_learn)
    button_keyswitch_midi_learn := 0
    button_keyswitch_midi_find := 0
end on


{ Keyswitch source channel value changed }
on ui_control(value_rule_keyswitch_source_channel)
    gui_set_selected_keyswitch_config(RULE_KEYSWITCH_SOURCE_CHANNEL, value_rule_keyswitch_source_channel)
    call build_ks_maps
    call gui_clear_active_routes_for_all_channels
    call gui_update_midi_channel_names
end on


{ Keyswitch target channel value changed }
on ui_control(value_rule_keyswitch_target_channel)
    gui_set_selected_keyswitch_config(RULE_KEYSWITCH_TARGET_CHANNEL, value_rule_keyswitch_target_channel)
    call build_ks_maps
    call gui_clear_active_routes_for_all_channels
    call gui_update_midi_channel_names
end on
